// This file was auto-generated by ML.NET Model Builder. 

using Microsoft.ML;
using System;
using System.IO;
using WebScraper.Core.ML;

namespace WebScraperML.ConsoleApp
{
    class Program
    {
        private static Lazy<PredictionEngine<PriceData, PricePrediction>> PredictionEngine = new Lazy<PredictionEngine<PriceData, PricePrediction>>(CreatePredictionEngine);
        
        public static string MLNetModelPath = Path.GetFullPath("ML/MLModel.zip");
        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            PriceData sampleData = new PriceData()
            {
                //HtmlElement = "<span class=\"a3q7 a3r2\">3&nbsp;790&nbsp;₽ <!----></span>"
                HtmlElement = "<div class=\"simple-card-price\">555,55 руб.</div>"
            };

            // Make a single prediction on the sample data and print results
            var predictionResult = Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual IsContainsPrice with predicted IsContainsPrice from sample data...\n\n");
            Console.WriteLine($"HtmlElement: {sampleData.HtmlElement}");
            Console.WriteLine($"\n\nPredicted IsContainsPrice value {predictionResult.Prediction} \nPredicted IsContainsPrice scores: [{String.Join("; ", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        public static PredictionEngine<PriceData, PricePrediction> CreatePredictionEngine()
        {
            // Create new MLContext
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var modelInputSchema);
            var predEngine = mlContext.Model.CreatePredictionEngine<PriceData, PricePrediction>(mlModel);

            return predEngine;
        }

        public static PricePrediction Predict(PriceData input)
        {
            PricePrediction result = PredictionEngine.Value.Predict(input);
            return result;
        }
    }
}
